// Template: Base Controller (ApiControllerBase.t4) version 3.0

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Calculadora.Models;

// Do not modify this file. This code was generated by RAML Server Scaffolder

namespace Calculadora
{
    [Route("calc")]
    public partial class CalcController : Controller
    {


/// <summary>
		/// Representa la operación de suma y debe ser soportada a través del verbo GET. Va a recibir los elementos a sumar como num1 y num2 como query strings - /add
		/// </summary>
		/// <param name="num1">Primer valor de la suma</param>
		/// <param name="num2">Segundo valor de la suma</param>
		/// <returns>Calculo</returns>
        [HttpGet("add")]
        public virtual IActionResult GetBase(decimal num1,decimal num2)
        {
            // Do not modify this code
                        return  ((ICalcController)this).Get(num1,num2);
                    }

/// <summary>
		/// Representa la operación de resta y debe ser soportada a través del verbo DELETE. Va a recibir sus elementos a restar como parte del cuerpo del mensaje - /sub
		/// </summary>
		/// <param name="calculo"></param>
		/// <returns>Calculo</returns>
        [HttpPatch("sub")]
        public virtual IActionResult PatchBase([FromBody] Models.Calculo calculo)
        {
            // Do not modify this code
                        return  ((ICalcController)this).Patch(calculo);
                    }

/// <summary>
		/// Representa la operación de multiplicación y debe ser soportada a través del verbo POST. Va a recibir sus elementos a multiplicar como parte del cuerpo del mensaje - /mul
		/// </summary>
		/// <param name="calculo"></param>
		/// <returns>Calculo</returns>
        [HttpPost("mul")]
        public virtual IActionResult PostBase([FromBody] Models.Calculo calculo)
        {
            // Do not modify this code
                        return  ((ICalcController)this).Post(calculo);
                    }

/// <summary>
		/// RRepresenta la operación de división y debe ser soportada a través del verbo PUT. Va a recibir sus elementos a dividir como num1 y num2 como query strings - /div
		/// </summary>
		/// <param name="content"></param>
		/// <param name="num1">valor del dividendo</param>
		/// <param name="num2">valor del divisor</param>
		/// <returns>Calculo</returns>
        [HttpPut("div")]
        public virtual IActionResult PutBase([FromBody] string content,decimal num1,decimal num2)
        {
            // Do not modify this code
                        return  ((ICalcController)this).Put(content,num1,num2);
                    }
    }
}
